{"version":3,"sources":["store/actions/signoutaction.js","Components/layout/signinlink.js","Components/layout/signoutlink.js","Components/layout/Navbar.js","Components/dashboard/notifications.js","Components/projects/ProjectSummary.js","Components/projects/ProjectList.js","Components/dashboard/Dashboard.js","Components/projects/ProjectDetails.js","store/actions/authActions.js","Components/Auth/signin.js","store/actions/signupaction.js","Components/Auth/signup.js","Components/projects/CreateProjects.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authreducer.js","store/reducers/projectreducer.js","store/reducers/rootReducer.js","configurations/fbconfig.js","index.js"],"names":["signOut","dispatch","getState","firebase","getFirebase","auth","logout","then","type","catch","err","connect","props","className","to","onClick","profile","initials","SignedOutLinks","state","links","uid","isLoaded","Notifications","notifications","map","notification","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","Dashboard","this","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","signIn","credentials","signInWithEmailAndPassword","email","password","signin","handleChange","e","setState","target","value","handleSubmit","preventDefault","authError","onSubmit","htmlFor","onChange","creds","signUpAction","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","FirstName","LastName","signup","CreateProject","createProject","history","push","authorId","add","Date","App","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","ProjectReducer","RootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","firebaseconfig","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4597ef48.chunk.js","sourcesContent":["const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut()\n        firebase.logout().then (() => {\n            dispatch({type: 'SIGNOUT_SUCCESS'});\n        }).catch ((err) => {\n            dispatch({ type: 'SIGNOUT_ERROR', err});\n        });\n    }\n}\n\nexport default signOut","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport signOut from '../../store/actions/signoutaction'\n\n\nconst SignedInLinks = (props) => {\n    return (\n        <ul className=\"right\">\n            <li><NavLink to = '/createproject'> New Project </NavLink></li>\n            <li><a onClick={props.signOut}> Log Out </a></li>\n            <li><NavLink to = '/' className = \"btn btn-floating pink lighten-1\"> \n            {props.profile.initials}\n            </NavLink></li>\n        </ul>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst SignedOutLinks = () => {\n    return (\n        <ul className=\"right\">\n            <li><NavLink to = '/signup'> Sign Up </NavLink></li>\n            <li><NavLink to = '/signin'> Log in </NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOutLinks;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './signinlink';\nimport SignedOutLinks from './signoutlink';\nimport { connect } from 'react-redux';\n\nconst Navbar = (props) => {\n    const { auth, profile } = props;\n    const links = auth.uid ? <SignedInLinks profile = {profile} /> : <SignedOutLinks />\n    return (\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <Link to = '/' className = \"brand-logo\"> MarioPlan </Link>\n               {auth.isLoaded && links}\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar);","import React from 'react'\nimport moment from 'moment'\n\nconst Notifications = (props) => {\n    const {notifications} = props;\n    return (\n        <div className=\"section\">\n            <div className=\"card z-depth-0\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Notifications</span>\n                    <ul className=\"notifications\">\n                        {notifications && notifications.map(notification => {\n                            return (\n                                <li key={notification.id}>\n                                    <span className=\"pink-text\">{notification.user}</span>\n                                    <span>{notification.content}</span>\n                                    <div className=\"grey-text note-date\">\n                                        {moment(notification.time.toDate()).fromNow()}\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Notifications;","import React from 'react'\nimport moment from 'moment'\n\nconst ProjectSummary = ({project}) => {\n    return (\n        <div className=\"card z-depth-0 project-summary\">\n                <div className=\"card-content grey-text text-darken-3\">\n                    <span className=\"card-title\">{project.title}</span>\n                    <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\n                    <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\n                </div>\n            </div>\n    )\n}\n\nexport default ProjectSummary","import React from 'react'\nimport ProjectSummary from './ProjectSummary'\nimport { Link } from 'react-router-dom'\n\nconst ProjectList = ({projects}) => {\n    return (\n        <div className=\"project-list section\">\n           {projects && projects.map (project => {\n               return (\n                <Link to = {'/projects/' + project.id} key = {project.id}>\n                    <ProjectSummary project = {project}  />\n                </Link>\n               ) \n           })}\n        </div>\n    )\n}\n\nexport default ProjectList","import React, { Component } from 'react'\nimport Notifications from './notifications'\nimport ProjectList from '../projects/ProjectList'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component {\n    render () {\n        const { projects, auth, notifications } = this.props;\n        if (!auth.uid) return <Redirect to = '/signin' />\n        \n        return (\n            <div className=\"dashboard container\">\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <ProjectList projects = {projects} />\n                    </div>\n                    <div className=\"col s12 m5 offset-m1\">\n                        <Notifications notifications = {notifications} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return{\n        projects: state.firestore.ordered.project,\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n    \n}\n\nexport default compose (\n    connect(mapStateToProps),\n    firestoreConnect ([\n        { collection: 'project', orderBy: ['createdAt', 'desc']},\n        { collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\n    ])\n)(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport {firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\nconst ProjectDetails = (props) => {\n    const { project, auth } = props;\n    if (!auth.uid) return <Redirect to = '/signin' />\n    if (project) {\n    return (\n       <div className=\"container section project-details\">\n           <div className=\"card z-depth-0\">\n               <div className=\"card-content\">\n                   <div className=\"card-title\">{project.title}</div>\n                   <p>{project.content}</p>\n               </div>\n               <div className=\"card-action grey lighten-4 grey-text\">\n                   <div>Posted By {project.authorFirstName} {project.authorLastName}</div>\n                   <div>{moment(project.createdAt.toDate()).calendar()}</div>\n               </div>\n           </div>\n       </div>\n    ) \n}\nelse {\n    return (\n        <div className=\"container center\">\n            <p>Loading Project...</p>\n        </div>\n    )\n}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const id = ownProps.match.params.id;\n    const projects = state.firestore.data.project\n    const project = projects ? projects[id] : null\n    return {\n       project: project, \n       auth: state.firebase.auth\n    }\n}\n\nexport default compose (\n    connect (mapStateToProps),\n    firestoreConnect ([\n        { collection: 'project'}\n    ])\n)(ProjectDetails)\n\n","const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase ();\n\n        firebase.auth().signInWithEmailAndPassword (\n            credentials.email,\n            credentials.password\n        ).then (() => {\n            dispatch({ type: 'LOGIN_SUCCESS' });\n        }).catch ((err) => {\n            dispatch ({ type: 'LOGIN_ERROR', err});\n        });\n    }\n    \n}\n\nexport default signIn\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport signIn from '../../store/actions/authActions'\nimport { Redirect } from 'react-router-dom'\n\nexport class signin extends Component {\n    state ={\n        email: '',\n        password: ''\n    }\n    handleChange = (e) => {\n        this.setState ({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signIn(this.state)\n    }\n    render() {\n        const { authError, auth } = this.props;\n        if (auth.uid) return <Redirect to = '/' />\n        return (\n            <div className = \"container\">\n                <form onSubmit = {this.handleSubmit} className=\"white\">\n                <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                <div className=\"input-field\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" id=\"email\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n                    <div className=\"red-text center\">\n                        { authError ? <p>{authError}</p> : null}\n                    </div>\n                </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (creds) => dispatch(signIn(creds))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(signin)\n","const signUpAction = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase ();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword (\n            newUser.email,\n            newUser.password\n        ).then ((resp) => {\n            return firestore.collection('users').doc(resp.user.uid).set({\n                FirstName: newUser.FirstName,\n                LastName: newUser.LastName,\n                initials: newUser.FirstName[0] + newUser.LastName[0]\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' });\n        }).catch((err) => {\n            dispatch ({ type: 'SIGNUP_ERROR', err });\n        })\n    }\n}\n\nexport default signUpAction","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport signUpAction from '../../store/actions/signupaction'\n\nexport class signup extends Component {\n    state ={\n        email: '',\n        password: '',\n        FirstName: '',\n        LastName: ''\n    }\n    handleChange = (e) => {\n        this.setState ({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signUpAction(this.state)\n    }\n    render() {\n        const { auth, authError } = this.props;\n        if (auth.uid) return <Redirect to = '/' />\n        return (\n            <div className = \"container\">\n                <form onSubmit = {this.handleSubmit} className=\"white\">\n                <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n                <div className=\"input-field\">\n                    <label htmlFor=\"FirstName\">First Name</label>\n                    <input type=\"text\" id=\"FirstName\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <label htmlFor=\"LastName\">Last Name</label>\n                    <input type=\"text\" id=\"LastName\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" id=\"email\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n                </div>\n                <div className=\"red-text center\">\n                    { authError ? <p>{ authError }</p> : null }\n                </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        auth: state.firebase.auth,\n        authError: state.auth.authError\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signUpAction: (newUser) => dispatch(signUpAction(newUser))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(signup)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createProject } from '../../store/actions/projectActions'\nimport { Redirect } from 'react-router-dom'\n\nexport class CreateProject extends Component {\n    state ={\n        title: '',\n        content: ''\n    }\n    handleChange = (e) => {\n        this.setState ({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log(this.state)\n        this.props.createProject(this.state)\n        this.props.history.push('/');\n    }\n    render() {\n        const { auth } = this.props;\n        if (!auth.uid) return <Redirect to = '/signin' />\n        \n        return (\n            <div className = \"container\">\n                <form onSubmit = {this.handleSubmit} className=\"white\">\n                <h5 className=\"grey-text text-darken-3\">Create Project</h5>\n                <div className=\"input-field\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input type=\"text\" id=\"title\" onChange = {this.handleChange}/>\n                </div>\n                <div className=\"input-field\">\n                    <label htmlFor=\"content\">Project Content</label>\n                    <textarea id=\"content\" className=\"materialize-textarea\" onChange = {this.handleChange}></textarea>\n                </div>\n                <div className=\"input-field\">\n                    <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\n                </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createProject: (project) => dispatch(createProject(project))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)","export const createProject = (project) => {\n    return (dispatch, getState, {getFirestore, getFirebase}) => {\n        //make async call to database\n        const firestore = getFirestore ();\n        const profile = getState().firebase.profile;\n        const authorId = getState().firebase.auth.uid\n        firestore.collection('project').add({\n            ...project,\n            authorFirstName: profile.FirstName,\n            authorLastName: profile.LastName,\n            authorId: authorId,\n            createdAt: new Date()\n        }).then (() => {\n            dispatch({ type: 'CREATE_PROJECT' , project: project });\n        }).catch ((err) => {\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err });\n        })\n        \n    }\n};","import React, {Component} from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './Components/layout/Navbar'\nimport Dashboard from './Components/dashboard/Dashboard'\nimport ProjectDetails from './Components/projects/ProjectDetails'\nimport signin from './Components/Auth/signin'\nimport signup from './Components/Auth/signup'\nimport CreateProject from './Components/projects/CreateProjects'\n\nclass App extends Component {\n  render () {\n    return (\n     <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path = '/' component = {Dashboard} />\n            <Route path = '/projects/:id' component = {ProjectDetails} />\n            <Route path = '/signin' component = {signin} />\n            <Route path = '/signup' component = {signup} />\n            <Route path = '/createproject' component = {CreateProject} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'LOGIN_ERROR':\n            console.log('Login error');\n        return {\n            ...state,\n            authError: 'Login Failed'\n        }\n        case 'LOGIN_SUCCESS':\n            console.log('login success');\n        return {\n            ...state,\n            authError: null\n        }\n        case 'SIGNOUT_SUCCESS':\n            console.log('sign out success');\n            return state;\n        case 'SIGNOUT_ERROR':\n            console.log('signout error');\n            return {\n                state,\n                authError: 'logout error'\n            }\n        case 'SIGNUP_SUCCESS':\n            console.log('signup success');\n            return {\n            ...state,\n            authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('signup error');\n            return {\n                ...state,\n                authError: action.err.message\n            }\n        default:\n            return state;\n    }\n}\n\nexport default authReducer","const initState = {\n    projects: [\n        {id: 1, title: 'help find Peach', content: 'something goes here. idk what'},\n        {id: 2, title: 'mario escapes Bowsers trap!', content: 'something goes here. idk what'},\n        {id: 3, title: 'Bowser gained a little too much weight', content: 'something goes here. idk what'}\n    ]\n}\n\nconst ProjectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'CREATE_PROJECT':\n            console.log('created project', action.project);\n            return state;\n        case 'CREATE_PROJECT_ERROR':\n            console.log('created project error', action.err);\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default ProjectReducer","import authReducer from './authreducer';\nimport ProjectReducer from './projectreducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst RootReducer = combineReducers ({\n    auth: authReducer,\n    project: ProjectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n});\n\nexport default RootReducer","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nvar firebaseconfig = {\n    apiKey: \"AIzaSyDOWMwV3yjMTI0y5E4-LepYwm2qJMZLIu8\",\n    authDomain: \"jv-marioplan.firebaseapp.com\",\n    databaseURL: \"https://jv-marioplan.firebaseio.com\",\n    projectId: \"jv-marioplan\",\n    storageBucket: \"jv-marioplan.appspot.com\",\n    messagingSenderId: \"1000939212938\"\n  };\n\n  firebase.initializeApp(firebaseconfig);\n  firebase.firestore().settings({timestampsInSnapshots: true});\n\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport firebase from 'firebase/app'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose} from 'redux';\nimport RootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore'\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase'\nimport firebaseconfig from './configurations/fbconfig';\n\n\nconst store = createStore(RootReducer,\n    compose ( \n    applyMiddleware(thunk.withExtraArgument ({getFirestore, getFirebase})),\n    reduxFirestore(firebase, firebaseconfig)\n    )\n    );\n\nconst rrfConfig = {\n    userProfile: \"users\",\n    useFirestoreForProfile: true\n}\n\n\nconst rrfProps = {\n    firebase,\n    config: rrfConfig,\n    dispatch: store.dispatch,\n    createFirestoreInstance,\n};\n\n    ReactDOM.render (\n        <Provider store = {store}>\n            <ReactReduxFirebaseProvider {...rrfProps}>\n                <App />\n            </ReactReduxFirebaseProvider>\n        </Provider>, \n        document.getElementById('root')\n        );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}